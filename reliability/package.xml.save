<?xml version="1.0"?>
<?xml-model href="http://download.ros.org/schema/package_format3.xsd" schematypens="http://www.w3.org/2001/XMLSchema"?>
<package format="3">
  <name>reliability</name>
  <version>0.0.0</version>
  <description>TODO: Package description</description>
  <maintainer email="cuong@todo.todo">cuong</maintainer>
  <license>TODO: License declaration</license>

  <test_depend>ament_copyright</test_depend>
  <test_depend>ament_flake8</test_depend>
  <test_depend>ament_pep257</test_depend>
  <test_depend>python3-pytest</test_depend>
  import rclpy
from rclpy.node import Node
import random
from std_msgs.msg import Int32
from std_msgs.msg import Int32MultiArray
from tutorial_interfaces.msg import Num

class MinimalPublisher(Node):

    def __init__(self):
        super().__init__('minimal_publisher')
        self.publisher_ = self.create_publisher(Num, 'topic', 10)
        # self.count = self.create_publisher(Int32, 'count', 10)
        timer_period = 0.01  # seconds
        self.timer = self.create_timer(timer_period, self.timer_callback)
        self.i = 0
        # self.count = 0

    def timer_callback(self):
        msg = Num()
        # msg_count = Int32()
        for i in range(0, 24998):
            n = random.randint(0,1000)
            msg.data.append(n) 
        msg.count = self.i
        # msg_count.data = self.i
        self.publisher_.publish(msg)
        # self.count.publish(msg_count)
        self.get_logger().info('Publishing: "%s"' % self.i)
        self.i += 1


def main(args=None):
    rclpy.init(args=args)

    minimal_publisher = MinimalPublisher()

    rclpy.spin(minimal_publisher)

    # Destroy the node explicitly
    # (optional - otherwise it will be done automatically
    # when the garbage collector destroys the node object)
    minimal_publisher.destroy_node()
    rclpy.shutdown()


if __name__ == '__main__':
    main()
  <export>
    <build_type>ament_python</build_type>
  </export>
</package>
